/**
 */
package autoDesigner1.provider;

import autoDesigner1.util.AutoDesigner1AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AutoDesigner1ItemProviderAdapterFactory extends AutoDesigner1AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AutoDesigner1ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.VehicleTopology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VehicleTopologyItemProvider vehicleTopologyItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.VehicleTopology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVehicleTopologyAdapter() {
		if (vehicleTopologyItemProvider == null) {
			vehicleTopologyItemProvider = new VehicleTopologyItemProvider(this);
		}

		return vehicleTopologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Data_In} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Data_InItemProvider data_InItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Data_In}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createData_InAdapter() {
		if (data_InItemProvider == null) {
			data_InItemProvider = new Data_InItemProvider(this);
		}

		return data_InItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemProvider dataItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAdapter() {
		if (dataItemProvider == null) {
			dataItemProvider = new DataItemProvider(this);
		}

		return dataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Data_Out} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Data_OutItemProvider data_OutItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Data_Out}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createData_OutAdapter() {
		if (data_OutItemProvider == null) {
			data_OutItemProvider = new Data_OutItemProvider(this);
		}

		return data_OutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.EED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EEDItemProvider eedItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.EED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEEDAdapter() {
		if (eedItemProvider == null) {
			eedItemProvider = new EEDItemProvider(this);
		}

		return eedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.ECU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECUItemProvider ecuItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.ECU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECUAdapter() {
		if (ecuItemProvider == null) {
			ecuItemProvider = new ECUItemProvider(this);
		}

		return ecuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.HPCU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HPCUItemProvider hpcuItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.HPCU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHPCUAdapter() {
		if (hpcuItemProvider == null) {
			hpcuItemProvider = new HPCUItemProvider(this);
		}

		return hpcuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.NetworkSwitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkSwitchItemProvider networkSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.NetworkSwitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkSwitchAdapter() {
		if (networkSwitchItemProvider == null) {
			networkSwitchItemProvider = new NetworkSwitchItemProvider(this);
		}

		return networkSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Gateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GatewayItemProvider gatewayItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Gateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGatewayAdapter() {
		if (gatewayItemProvider == null) {
			gatewayItemProvider = new GatewayItemProvider(this);
		}

		return gatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Settings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettingsItemProvider settingsItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Settings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettingsAdapter() {
		if (settingsItemProvider == null) {
			settingsItemProvider = new SettingsItemProvider(this);
		}

		return settingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Route} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RouteItemProvider routeItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Route}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRouteAdapter() {
		if (routeItemProvider == null) {
			routeItemProvider = new RouteItemProvider(this);
		}

		return routeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.L_In} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected L_InItemProvider l_InItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.L_In}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createL_InAdapter() {
		if (l_InItemProvider == null) {
			l_InItemProvider = new L_InItemProvider(this);
		}

		return l_InItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.L_Out} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected L_OutItemProvider l_OutItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.L_Out}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createL_OutAdapter() {
		if (l_OutItemProvider == null) {
			l_OutItemProvider = new L_OutItemProvider(this);
		}

		return l_OutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Order} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderItemProvider orderItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Order}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderAdapter() {
		if (orderItemProvider == null) {
			orderItemProvider = new OrderItemProvider(this);
		}

		return orderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.GPU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GPUItemProvider gpuItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.GPU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGPUAdapter() {
		if (gpuItemProvider == null) {
			gpuItemProvider = new GPUItemProvider(this);
		}

		return gpuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Memory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryItemProvider memoryItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Memory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryAdapter() {
		if (memoryItemProvider == null) {
			memoryItemProvider = new MemoryItemProvider(this);
		}

		return memoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Processor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessorItemProvider processorItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Processor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessorAdapter() {
		if (processorItemProvider == null) {
			processorItemProvider = new ProcessorItemProvider(this);
		}

		return processorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Core} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoreItemProvider coreItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Core}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoreAdapter() {
		if (coreItemProvider == null) {
			coreItemProvider = new CoreItemProvider(this);
		}

		return coreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Partition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartitionItemProvider partitionItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Partition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartitionAdapter() {
		if (partitionItemProvider == null) {
			partitionItemProvider = new PartitionItemProvider(this);
		}

		return partitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Ethernet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EthernetItemProvider ethernetItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Ethernet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEthernetAdapter() {
		if (ethernetItemProvider == null) {
			ethernetItemProvider = new EthernetItemProvider(this);
		}

		return ethernetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.USB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected USBItemProvider usbItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.USB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUSBAdapter() {
		if (usbItemProvider == null) {
			usbItemProvider = new USBItemProvider(this);
		}

		return usbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Cache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheItemProvider cacheItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Cache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheAdapter() {
		if (cacheItemProvider == null) {
			cacheItemProvider = new CacheItemProvider(this);
		}

		return cacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Lidar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LidarItemProvider lidarItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Lidar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLidarAdapter() {
		if (lidarItemProvider == null) {
			lidarItemProvider = new LidarItemProvider(this);
		}

		return lidarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.Camera} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CameraItemProvider cameraItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.Camera}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCameraAdapter() {
		if (cameraItemProvider == null) {
			cameraItemProvider = new CameraItemProvider(this);
		}

		return cameraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.ControllNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllNodeItemProvider controllNodeItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.ControllNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllNodeAdapter() {
		if (controllNodeItemProvider == null) {
			controllNodeItemProvider = new ControllNodeItemProvider(this);
		}

		return controllNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.UserCreatedTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserCreatedTaskItemProvider userCreatedTaskItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.UserCreatedTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserCreatedTaskAdapter() {
		if (userCreatedTaskItemProvider == null) {
			userCreatedTaskItemProvider = new UserCreatedTaskItemProvider(this);
		}

		return userCreatedTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.LidarMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LidarMappingItemProvider lidarMappingItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.LidarMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLidarMappingAdapter() {
		if (lidarMappingItemProvider == null) {
			lidarMappingItemProvider = new LidarMappingItemProvider(this);
		}

		return lidarMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link autoDesigner1.CamMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CamMappingItemProvider camMappingItemProvider;

	/**
	 * This creates an adapter for a {@link autoDesigner1.CamMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCamMappingAdapter() {
		if (camMappingItemProvider == null) {
			camMappingItemProvider = new CamMappingItemProvider(this);
		}

		return camMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vehicleTopologyItemProvider != null)
			vehicleTopologyItemProvider.dispose();
		if (applicationItemProvider != null)
			applicationItemProvider.dispose();
		if (mappingItemProvider != null)
			mappingItemProvider.dispose();
		if (taskItemProvider != null)
			taskItemProvider.dispose();
		if (linkItemProvider != null)
			linkItemProvider.dispose();
		if (data_InItemProvider != null)
			data_InItemProvider.dispose();
		if (dataItemProvider != null)
			dataItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (data_OutItemProvider != null)
			data_OutItemProvider.dispose();
		if (processItemProvider != null)
			processItemProvider.dispose();
		if (eedItemProvider != null)
			eedItemProvider.dispose();
		if (ecuItemProvider != null)
			ecuItemProvider.dispose();
		if (hpcuItemProvider != null)
			hpcuItemProvider.dispose();
		if (networkSwitchItemProvider != null)
			networkSwitchItemProvider.dispose();
		if (gatewayItemProvider != null)
			gatewayItemProvider.dispose();
		if (settingsItemProvider != null)
			settingsItemProvider.dispose();
		if (routeItemProvider != null)
			routeItemProvider.dispose();
		if (l_InItemProvider != null)
			l_InItemProvider.dispose();
		if (l_OutItemProvider != null)
			l_OutItemProvider.dispose();
		if (orderItemProvider != null)
			orderItemProvider.dispose();
		if (gpuItemProvider != null)
			gpuItemProvider.dispose();
		if (memoryItemProvider != null)
			memoryItemProvider.dispose();
		if (processorItemProvider != null)
			processorItemProvider.dispose();
		if (coreItemProvider != null)
			coreItemProvider.dispose();
		if (partitionItemProvider != null)
			partitionItemProvider.dispose();
		if (ethernetItemProvider != null)
			ethernetItemProvider.dispose();
		if (usbItemProvider != null)
			usbItemProvider.dispose();
		if (cacheItemProvider != null)
			cacheItemProvider.dispose();
		if (lidarItemProvider != null)
			lidarItemProvider.dispose();
		if (cameraItemProvider != null)
			cameraItemProvider.dispose();
		if (controllNodeItemProvider != null)
			controllNodeItemProvider.dispose();
		if (userCreatedTaskItemProvider != null)
			userCreatedTaskItemProvider.dispose();
		if (lidarMappingItemProvider != null)
			lidarMappingItemProvider.dispose();
		if (camMappingItemProvider != null)
			camMappingItemProvider.dispose();
	}

}
